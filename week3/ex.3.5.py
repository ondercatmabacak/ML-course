 #!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue May  7 04:39:59 2019

@author: ayf

Example:
-------
The 2nd Classification Algorithm: Decision Tree Classifier

Model performance on real datasets
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
   


# invoke this method on ipython console when there are lots of plots
def closeAll():
    plt.close("all")

# method for reading datasets
def read_dataset(path, label_column):
    '''
    label_column; in which column data labels (classes) are placed
    '''
    # make dataset global
    global dataset
    # load csv data set from file using pandas
    dataset = pd.read_csv(path) # the type of dataset is pandas frame 
    # check Variable explorer and see data table
    
    # what is the name of columns (features)
    features = dataset.columns.tolist()
    # remove the label column
    features.remove(label_column)
    
    # we can extract data labels as follows
    labels = dataset.loc[:, label_column] # select label column
    # we can extract the actual data as follows
    data = dataset.loc[:, features] # select all columns except the label column
    # return the data and labels seperately
    return data, labels


# save tree as png
def save_tree(model, data, labels, suffix=""):
    #from IPython.display import Image  
    import pydotplus
    
    feature_names = data.columns
    class_names = [str(i) for i in labels.unique()]
    # Create DOT data
    dot_data = export_graphviz(model, feature_names=feature_names, class_names=class_names, filled=True)
    # Draw graph
    graph = pydotplus.graph_from_dot_data(dot_data)  
    # save graph to a png file
    file_name = "tree_{}.png".format(suffix)
    graph.write_png(file_name)
     

# plot importance of features
def plot_feature_importances(model, data):
    plt.figure()
    n_features = data.shape[1]
    plt.barh(range(n_features), model.feature_importances_, align='center')
    plt.yticks(np.arange(n_features), data.columns)
    plt.xlabel("Feature Importance", size=14)
    plt.ylim(-1, n_features)
    ax = plt.gca()
    ax.xaxis.tick_top()
    ax.xaxis.set_label_position('top') 
    ax.xaxis.labelpad = 20
    plt.tight_layout(pad=0.55)


closeAll()

#%% create a classification model: DTC
    
# model hyper-parameters (values are up to you)
criterion = "entropy"
max_depth = None

# create the model using the hyper parameters defined above
dtc = DecisionTreeClassifier(criterion=criterion, max_depth=max_depth, random_state=22)

##################################################
################ REAL DATASETS  ##################
##################################################
#%% iris dataset
path = "../datasets/iris/iris.csv"

print("::::: Iris Dataset :::::\n")
data, labels = read_dataset(path, "species")

dtc.fit(data, labels)
preds = dtc.predict(data)

# print details of tree generated by the model
node_count = dtc.tree_.node_count # how many nodes?
depth = dtc.tree_.max_depth # what is the depth of tree ?
print (">>> Node Count: {}".format(node_count))
print (">>> Tree Depth: {}".format(depth))
print("")

acc_score = accuracy_score(labels, preds)
print(">>> Accuracy Score: {}".format(acc_score))
conf_matrix = confusion_matrix(labels, preds)
print(">>> Confusion matrix: \n{}".format(conf_matrix))
report = classification_report(labels, preds)
print(">>> Classification Report: \n{}".format(report))
print("")

plot_feature_importances(dtc, data)
# save_tree(dtc, data, labels, "iris")

#%% optical digits dataset (training)
path = "../datasets/optdigits/optdigits.csv"

print("::::: Optical Digits Dataset  :::::\n")
data, labels = read_dataset(path, "digit")

dtc.fit(data, labels)
preds = dtc.predict(data)

# print details of tree generated by the model
node_count = dtc.tree_.node_count # how many nodes?
depth = dtc.tree_.max_depth # what is the depth of tree ?
print (">>> Node Count: {}".format(node_count))
print (">>> Tree Depth: {}".format(depth))
print("")

acc_score = accuracy_score(labels, preds)
print(">>> Accuracy Score: {}".format(acc_score))
conf_matrix = confusion_matrix(labels, preds)
print(">>> Confusion matrix: \n{}".format(conf_matrix))
report = classification_report(labels, preds)
print(">>> Classification Report: \n{}".format(report))
print("")

plot_feature_importances(dtc, data)
# it takes too much time !
# save_tree(dtc, data, labels, "digits")

#%% breast cancer dataset (Wisconsin Diagnostic Breast Cancer)
path = "../datasets/wdbc/wdbc.csv"

print("::::: Breast Dataset :::::\n")
data, labels = read_dataset(path, "diagnosis")

dtc.fit(data, labels)
preds = dtc.predict(data)

# print details of tree generated by the model
node_count = dtc.tree_.node_count # how many nodes?
depth = dtc.tree_.max_depth # what is the depth of tree ?
print (">>> Node Count: {}".format(node_count))
print (">>> Tree Depth: {}".format(depth))
print("")

acc_score = accuracy_score(labels, preds)
print(">>> Accuracy Score: {}".format(acc_score))
conf_matrix = confusion_matrix(labels, preds)
print(">>> Confusion matrix: \n{}".format(conf_matrix))
report = classification_report(labels, preds)
print(">>> Classification Report: \n{}".format(report))
print("")

plot_feature_importances(dtc, data)
# save_tree(dtc, data, labels, "wdbc")

#%% htru2 dataset (High Time Resolution Universe Collaboration using the Parkes Observatory)
path = "../datasets/htru2/htru2.csv"

print("::::: HTRU2 Dataset :::::\n")
data, labels = read_dataset(path, "ispulsar")

dtc.fit(data, labels)
preds = dtc.predict(data)

# print details of tree generated by the model
node_count = dtc.tree_.node_count # how many nodes?
depth = dtc.tree_.max_depth # what is the depth of tree ?
print (">>> Node Count: {}".format(node_count))
print (">>> Tree Depth: {}".format(depth))
print("")

acc_score = accuracy_score(labels, preds)
print(">>> Accuracy Score: {}".format(acc_score))
conf_matrix = confusion_matrix(labels, preds)
print(">>> Confusion matrix: \n{}".format(conf_matrix))
report = classification_report(labels, preds)
print(">>> Classification Report: \n{}".format(report))
print("")

plot_feature_importances(dtc, data)
# save_tree(dtc, data, labels, "htru")
